name: Build, Test and Publish

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Build package
        run: yarn build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/
          retention-days: 1

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Lint code
        run: yarn lint

      - name: Type check
        run: yarn check

  unit-tests:
    name: Unit Tests
    needs: code-quality
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        shard: [1, 2, 3, 4]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Build the app
        run: yarn build

      - name: Run Vitest
        run: yarn test:unit:shard ${{ matrix.shard }}/4 --run

  e2e-tests:
    name: E2E Tests
    needs: code-quality
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        shard: [1, 2]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Install Playwright browsers
        run: yarn playwright install --with-deps chromium

      - name: Build the app
        run: yarn build

      - name: Run E2E tests
        run: yarn playwright test tests/e2e --shard=${{ matrix.shard }}/2

      - name: Upload E2E test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-${{ matrix.shard }}
          path: playwright-report/
          retention-days: 7

  publish:
    name: Publish to NPM
    needs: [unit-tests, e2e-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'
          scope: '@zwidekalanga'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Build package
        run: yarn build

      - name: Setup Git Identity
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Determine version
        id: versioning
        run: |
          if [[ $(git log -1 --pretty=%B) == *"[major]"* ]]; then
            echo "VERSION_TYPE=major" >> $GITHUB_OUTPUT
          elif [[ $(git log -1 --pretty=%B) == *"[minor]"* ]]; then
            echo "VERSION_TYPE=minor" >> $GITHUB_OUTPUT
          else
            echo "VERSION_TYPE=patch" >> $GITHUB_OUTPUT
          fi

      - name: Bump version
        run: npm version ${{ steps.versioning.outputs.VERSION_TYPE || 'patch' }} -m "Bump version to %s [skip ci]"

      - name: Publish to npm
        run: yarn publish --access public --new-version $(node -p "require('./package.json').version")
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
